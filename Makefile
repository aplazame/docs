#!make
SHELL := env PATH=$(shell npm bin):$(PATH) /bin/bash -O extglob

.SILENT:
.PHONY: count.lines lint install assets messages css js test paypal-popup sass html app app-prod build-dev dev prod watch live app-stripe-3ds server/config.json public/prod public/pre public/staging public/dev public/squad

default: install count.lines test log.ENV_DATA log.DEMO_DATA build
.DEFAULT_GOAL := default

export UNAME_S=$(shell uname -s)
export BRANCH_NAME=$(shell git symbolic-ref --short HEAD)

export BUILD_TIMESTAMP=$(date +%s)
export BUILD_HASH=$(shell git rev-parse --short HEAD)

ifeq ($(wildcard ./.env),./.env)
include .env
export $(shell sed 's/=.*//' .env)
endif

ifndef ENV
  export ENV=staging
endif

ifdef API
  export ENV=${API}
endif

ifndef API
  export API=${ENV}
endif

ifndef BUNDLE
  export BUNDLE=development
endif

ifndef OUT_DIR
  export OUT_DIR=public
endif

ifndef SANDBOX
  export SANDBOX=true
endif

ifndef IS_TEST
  export IS_TEST=false
endif

ifndef FORCE_COLOR
  export FORCE_COLOR=true
endif

ifndef CHECKOUT_URL
  export CHECKOUT_URL=http://checkout.aplazame.local/demo/es/
endif

# https://www.npmjs.com/package/sloc#usage
count.lines:; sloc .make app

node_modules:; npm install
install:; npm install
i: install

lint: node_modules
	eslint 'app/{,**/}*.{js,vue}'

list.mocha:
	fsdir -d app \
		--each '{,**/}*{-test,.test}.js' 'echo $$FILE_PATH'

mocha: node_modules
	mocha \
		--require @babel/register \
		--require module-alias/register \
		--reporter mocha-multi \
		--reporter-options spec=-,xunit=test-results/mocha/results.xml \
		--color \
		"./app/{,**/}{*-tests,*.test}.js"

jest: export IS_TEST=true
jest: export JEST_JUNIT_OUTPUT_DIR=./coverage

# Execute single file: $(npm bin)/jest --testPathPattern '.+TypeSelector.ui.spec.js'

jest: node_modules
	jest --coverage --testPathPattern '.+\.ui\.spec\.js'

quick.jest: export IS_TEST=true
quick.jest:
	jest --testPathPattern '.+\.ui\.spec\.js'

ci.test: export JEST_JUNIT_OUTPUT_DIR=./coverage
ci.test: node_modules
	jest \
		--coverage \
		--testResultsProcessor="jest-junit" \
		--testPathPattern '.+\.ui\.spec\.js' \
		--maxWorkers 1

test: jest

# include ./.make/*.mk

local-ui-components: node_modules
	cd node_modules/@aplazame; \
	rm -rf ui; \
	ln -s ../../../ui-components ui

log.ENV_DATA:
	@echo
	@node -e "console.log('ENV_DATA\n\n', require('./.make/_env'))"
	@echo

log.DEMO_DATA:
	@echo
	@node -e "console.log('DEMO_DATA\n\n', require('./.make/_demo-data'))"
	@echo

clean:
	rm -rf public

public:; mkdir -p public
public/assets:; mkdir -p public/assets

public/mock-data:; cp -r mock-data public

assets: public/assets public/mock-data
	cp -r node_modules/@aplazame/ui/assets/* public/assets/
	cp -r assets/* public/assets/
ifdef LOCAL_CHECKOUT_JSON_FILE
	json5 ${LOCAL_CHECKOUT_JSON_FILE} -o public/assets/checkout.json
endif

messages:
	node .make/messages.js es-ES -o static/messages/es-ES.json
	cat static/messages/es-ES.json | node .make/messages.js pt-PT -o static/messages/pt-PT.json

inject.checkout.css:
	echo "// DO NOT EDIT THIS FILE" > ./app/checkout/.injected.sass
	echo "// this content is auto-generated" >> ./app/checkout/.injected.sass
	echo "" >> ./app/checkout/.injected.sass

	fsdir -d app/checkout \
		--each '{components,components-vue,sections,modals,services}/{,**/}*.{sass,scss}; !{,**/}*_.{sass,scss}' \
		'echo "@import \"./$$FILE_DIR/$$FILE_NAME\"" >> ./app/checkout/.injected.sass'

checkout.css: inject.checkout.css
	mkdir -p public/_/$$BUILD_HASH
	sass --indented \
		app/checkout/checkout.sass | postcss > public/_/$$BUILD_HASH/checkout.css

upload-docs.css:
	mkdir -p public/upload-docs
	sass --indented \
		app/upload-docs/upload-docs.sass | postcss > public/upload-docs/upload-docs.$$BUILD_HASH.css

stripe-3ds.css:
	mkdir -p public/stripe-3ds
	sass --indented \
		app/stripe-3ds/stripe-3ds.sass | postcss > public/stripe-3ds/stripe-3ds.$$BUILD_HASH.css

css:
	$(MAKE) checkout.css & \
	$(MAKE) upload-docs.css & \
	$(MAKE) stripe-3ds.css & \
	wait < <(jobs -p)

live-watch-css:
	fsdir -d app \
		--watch '{,**/}*.{scss,sass}' 'make css && browser-sync reload -p 8088 --files="*.css"'

js:
	webpack ${WEBPACK_FLAGS} --no-stats

build.webpack: node_modules clean public
	$(MAKE) assets & \
	$(MAKE) messages & \
	$(MAKE) css & \
	$(MAKE) js
	wait

live-server:
	# webpack serve --color
	browser-sync start -s public --no-notify --host $$LOCAL_IP --port 8088

server/config.json:
	node ./server/create.config.js

api.proxy: server/config.json
	cd server && node ./server.js

dist/lambda.zip: server/config.json
	cat server/config.json
	
	mkdir -p dist
	zip -r -j dist/lambda.zip server/* \
		--exclude='*.yml' \
		--exclude='*create.config.js'

# live: export WEBPACK_SERVER_PORT=8080
live.webpack: export WEBPACK_FLAGS=--watch
live.webpack: export WEBPACK_MAIN_ON_FIRST_BUILD=make live-server
live.webpack: export WEBPACK_MAIN_ON_NEXT_BUILDS=browser-sync reload -p 8088
live.webpack: node_modules
	@$(MAKE) log.DEMO_DATA
	@$(MAKE) log.ENV_DATA

	$(MAKE) build & \
	$(MAKE) live-watch-css & \
	$(MAKE) api.proxy
	wait < <(jobs -p)

prod: export ENV=production
prod: export BUNDLE=production
prod: install build

storybook:
	start-storybook -p 6006

storybook-build:
	mkdir public/demo/storybook
	build-storybook -o public/demo/storybook

jsdoc:
	mkdir -p public/demo/jsdoc
	jsdoc --configure .jsdoc.json --verbose app -d public/demo/jsdoc

e2e:
	e2e-checkout --base-url=${CHECKOUT_URL}

cypress-e2e:
	cd e2e && npm run start

cypress:
	export LIVE_FLAGS=--no-open
	$(MAKE) build
	$(MAKE) live-server & \
	$(MAKE) cypress-e2e & \
	wait < <(jobs -p)

release:
	@echo "\n UOU!! vanilla is in development, maybe you need a coffee ☕ ¯\_(ツ)_/¯ \n"

npmrc:
	sed -i 's/$${NPM_TOKEN}/'$$NPM_TOKEN'/' .npmrc

pre.build: node_modules log.ENV_DATA messages inject.checkout.css

up: pre.build
	vite -c ./vite.config.js

index.build: ./$(OUT_DIR)/index.html ./$(OUT_DIR)/*/index.html ./$(OUT_DIR)/*/*/index.html
	echo "<html data-build=\"$$BUILD_HASH\">"
ifeq ($(UNAME_S),Darwin)
	for file in $^ ; do \
		sed -i '' 's/<html/<html data-build="'$$BUILD_HASH'"/' $${file} ; \
	done
else
	for file in $^ ; do \
		sed -i 's/<html/<html data-build="'$$BUILD_HASH'"/' $${file} ; \
	done
endif

build: pre.build
	vite -c ./vite.config.js build --emptyOutDir
	$(MAKE) index.build
	touch $(OUT_DIR)/build-$$BUILD_HASH.api-$$ENV
	$(MAKE) copy.coverage

copy.coverage:
	[ -d ./coverage/lcov-report ] && mkdir -p $(OUT_DIR)/demo/coverage && cp -r coverage/lcov-report/* $(OUT_DIR)/demo/coverage || true

preview:
	vite preview -c ./vite.config.js

live: up

# public/prod:; API=prod OUT_DIR=public/prod $(MAKE) build
# public/pre:; API=pre OUT_DIR=public/pre $(MAKE) build
# public/staging:; API=staging OUT_DIR=public/staging $(MAKE) build
# public/dev:; API=dev OUT_DIR=public/dev $(MAKE) build
# public/squad:; API=squad OUT_DIR=public/squad $(MAKE) build
